# English translations
TRANSLATIONS = {
    # === PAGE & INTERFACE ===
    "page_title": "HomeTube",
    "page_header": "🎬 &nbsp; HomeTube",
    "video_url": "Video URL",
    "video_name": "Video name",
    "video_name_help": "Name of the output video file (without extension). If left empty, the default video title will be used.",
    "destination_folder": "Destination folder",
    "subtitles_to_embed": "Subtitles to embed",
    "subtitles_help": "The subtitles list is specified from the SUBTITLES_CHOICES variable in the .env file",
    "options": "Options",
    "other_options": "Other options",
    "download_button": "Download",
    "download_button_help": "Start download with selected parameters",
    "cancel_button": "❌ Cancel",
    "cancel_button_help": "Stop download and clean temporary files",
    "download_cancelled": "⚠️ Download cancelled by user",
    "cleaning_temp_files": "🧹 Cleaning temporary files...",
    "cleanup_complete": "✅ Cleanup complete",
    "waiting": "Waiting…",
    "logs": "Logs",
    "download_logs_button": "📥 Download logs",
    # === URL ANALYSIS ===
    "url_analysis_spinner": "🔍 Analyzing URL...",
    "error_analyzing_url": "Error analyzing URL",
    "error_invalid_url_type": "Invalid URL type",
    "url_invalid_content": "This URL does not appear to be a compatible video or playlist.",
    "playlist_type": "Playlist",
    "video_type": "video",
    "url_title": "Title",
    "url_author": "Author",
    "url_duration": "Duration",
    "url_views": "views",
    "url_likes": "likes",
    "url_video_count": "Videos",
    "url_first_video": "First video",
    # === ADS AND SPONSORS ===
    "ads_sponsors_title": "📊 &nbsp; Advertising and Sponsors",
    "ads_sponsors_presentation": 'All YouTube ads are natively filtered when downloading the video.\n\nIdentified Sponsor sections can also be filtered during download with "Remove" options or marked with chapters with "Mark" options.\n\nChoose the filtering level that best suits your needs.',
    "ads_sponsors_label": "Sponsor Management",
    "detect_sponsors_button": "🔍 Detect Sponsors",
    "detect_sponsors_help": "Analyze this video to automatically detect sponsor segments",
    "sponsors_detected_title": "Detected segments:",
    "sponsors_detected_summary": "📋 {count} segments found | ⏱️ Total duration: {duration}",
    "sponsors_config_title": "Segment configuration:",
    "sponsors_remove_label": "To remove (cut from final file)",
    "sponsors_mark_label": "To mark (chapters only)",
    "no_sponsors_found": "No sponsor segments found in this video",
    "sb_option_1": "🎯 Default - Remove: sponsors,interactions,selfpromo | Mark: intros,previews,outros",
    "sb_option_2": "⚡ Moderate - Remove: sponsors,interactions,outros | Mark: selfpromo,intros,previews",
    "sb_option_3": "🔥 Aggressive - Remove: ALL",
    "sb_option_4": "🎬 Conservative - Remove: sponsors,outros | Mark: interactions,selfpromo,intros,previews",
    "sb_option_5": "📝 Minimal - Remove: sponsors only | Mark: all others",
    "sb_option_6": "❌ Disabled - No sponsor management",
    "sb_help": "Remove = cuts segments (requires clean keyframes). Mark = adds chapters. Some merges may display an error message but the final file remains correct.",
    # === CUTTING ===
    "cutting_title": "✂️ &nbsp; Cutting",
    "cutting_modes_presentation": "Two cutting options:\n- ⚡ Keyframes: Cuts at nearest keyframes with no re-encoding. Very fast, clean but with approximate cuts depending of the keyframes\n- 🎯 Precise: Exact cuts with full re-encoding. Very slow, uncertain render but with precise cuts\n\nChoose the option that best fits your needs. Keyframes cut is encouraged because of a more stable no re-encoding solution.",
    "cutting_mode_prompt": "Cutting solution:",
    "cutting_mode_keyframes": "⚡ Keyframes",
    "cutting_mode_precise": "🎯 Precise",
    "cutting_mode_help": "Keyframes mode: much faster but approximate cuts at keyframes. Precise mode: exact cuts but requires full video re-encoding.",
    "cutting_mode_keyframes_info": "⚡ Keyframes: Cuts at nearest keyframes with no re-encoding. Very fast, clean but with approximate cuts depending of the keyframes.",
    "cutting_mode_precise_info": "⏳ &nbsp; Precise: Exact cuts with full re-encoding. Very slow, uncertain render but with precise cuts.",
    "start_time": "Start",
    "end_time": "End",
    "time_format_help": "Examples: 11  •  0:11  •  00:00:11  •  1:02:03",
    "sponsorblock_sections_info": "💡 **Sections and SponsorBlock:** The end timestamp is the same as the one in the Youtube video, no matter the existence of a sponsor block within the desired video. In case of a removed sponsor block within the video, the end timestamp will be reduced according to the sponsor block duration. Example: if you want 5:00-10:00 in the original video and there's 1min of sponsor content, you'll get 4min of useful content (5min - 1min sponsor) ending at the original 10:00 video timestamp.",
    # === ENCODING OPTIONS ===
    "advanced_encoding_options": "Advanced re-encoding options:",
    "codec_video": "Video codec:",
    "codec_h264": "H.264 (Compatible, faster)",
    "codec_h265": "H.265 (More compressed, slower)",
    "codec_help": "H.264 for maximum compatibility, H.265 for better compression",
    "encoding_quality": "Encoding quality:",
    "quality_balanced": "Balanced (CRF 16, preset slow)",
    "quality_high": "High quality (CRF 14, preset slower)",
    "quality_help": "Balanced = faster, High quality = slower but better",
    "h264_settings": "🎬 H.264: `-preset {preset} -crf {crf} -pix_fmt yuv420p`",
    "h265_settings": "🎬 H.265: `-preset {preset} -crf {crf} -pix_fmt yuv420p10le`",
    # === VIDEO QUALITY ===
    "quality_title": "🎥 &nbsp; Video Quality",
    "quality_detect_btn": "🔍 &nbsp; Detect qualities",
    "quality_detect_help": "Analyze the video to see available qualities",
    "quality_detecting": "Detecting formats...",
    "quality_select_prompt": "Choose quality:",
    "quality_auto_option": "auto (best quality)",
    "quality_select_help": "Auto = best available quality. Choose a specific quality to control file size.",
    "quality_auto_info": "🎬 &nbsp; Quality: Auto (best available) - Click 'Detect qualities' to see options",
    # === EMBEDDING ===
    "embedding_title": "📦 &nbsp; Video Embedding",
    # Subtitles section
    "subtitles_section_title": "📝 &nbsp; Subtitles",
    "subtitles_info": "**Auto-generated subtitles** often have poor formatting and readability issues. They tend to stick together and chain in an illegible way. Only the YouTube client can display them correctly.\nWe keep the write-auto-subs option because having imperfect subtitles is better than having none at all.",
    "embed_subs": "Embed subtitles into the video",
    "embed_subs_help": "Embeds subtitles into the MKV.",
    # Chapters section
    "chapters_section_title": "📑 &nbsp; Chapters",
    "chapters_info": "**Chapter markers** Chapter markers help navigate through the video content and can be embedded directly into the video file.\nChapter embedding can sometimes interfere with video cuts.",
    "embed_chapters": "Embed chapters into the video",
    "embed_chapters_help": "Adds chapter markers to the file (may sometimes interfere with exotic merges).",
    # === COOKIES MANAGEMENT ===
    "cookies_title": "🍪 &nbsp; Cookie Management",
    "cookies_presentation": """**Cookie authentication methods for YouTube:**
- **📁 From File**: Use a Netscape-formatted cookies file (most reliable for age-restricted content)
- **🌐 From Browser**: Extract cookies directly from your browser (convenient but may require browser restart)
- **🚫 No Cookies**: No authentication (public videos only, age-restricted content will fail)""",
    "cookies_method_prompt": "**Choose authentication method:**",
    "cookies_method_help": "Select how yt-dlp should authenticate with YouTube",
    "cookies_method_file": "📁 Cookies from file",
    "cookies_method_browser": "🌐 Cookies from browser",
    "cookies_method_none": "🚫 No cookies",
    # === ADVANCED OPTIONS ===
    "advanced_options": "⚙️ &nbsp; Advanced Options",
    "advanced_options_presentation": "Configure advanced yt-dlp parameters for specialized use cases.",
    "ytdlp_custom_args": "Custom yt-dlp arguments",
    "ytdlp_custom_args_help": "Additional command-line arguments to pass to yt-dlp (e.g., --proxy socks5://127.0.0.1:1080, --max-filesize 500M)",
    "ytdlp_custom_args_placeholder": "e.g., --proxy socks5://127.0.0.1:1080 --max-filesize 500M",
    # === STATUS MESSAGES ===
    "status_preparation": "Preparation…",
    "status_downloading": "Downloading…",
    "status_downloading_simple": "Downloading…",
    "status_merging": "Merging audio/video…",
    "status_integrating_subs": "Integrating subtitles…",
    "status_removing_sponsors": "Removing SponsorBlock segments…",
    "status_processing_ffmpeg": "Processing with ffmpeg…",
    "status_downloading_processing": "Downloading / Processing… {pct}%",
    "status_cutting_video": "Cutting video with ffmpeg...",
    "status_completed": "Completed ✅",
    "status_file_ready": "File ready: {subfolder}",
    "status_retry_android": "🔄 Retry with Android client...",
    "status_retry_ios": "🔄 Retry with iOS client...",
    "status_retry_web": "🔄 Retry with Web client...",
    "status_retry_cookies": "🍪 Retry with authentication cookies...",
    "status_trying_no_auth": "🚀 Attempting download (no authentication)...",
    # === ERROR MESSAGES ===
    "error_provide_url_filename": "Please provide the URL and filename.",
    "error_provide_url": "Please provide the video URL.",
    "error_download_failed": "Download failed. See logs above.",
    "error_ffmpeg_cut_failed": "ffmpeg cutting failed. See logs.",
    "error_ffmpeg": "ffmpeg error: {error}",
    "error_http_403_detected": "🚫 HTTP 403 Forbidden Error Detected",
    "error_signature_issue": "🔑 SIGNATURE ISSUE DETECTED:",
    "error_cookies_required": "⚠️ ENABLE COOKIES - This is likely the main issue",
    "error_cookies_expired": "🔄 UPDATE YOUR COOKIES - They may be expired",
    "cookies_expired_friendly_message": "Your YouTube cookies have expired and need to be refreshed. Please update them in the Advanced Options section.",
    "cookies_warning_dismiss": "Got it, dismiss this warning",
    "hint_signature_protection": "YouTube uses encrypted signatures to protect video streams",
    "hint_cookies_for_public": "Even public videos need cookies for signature verification!",
    # === SUCCESS/WARNING MESSAGES ===
    "formats_detected": "✅ Detected {count} available formats!",
    "no_formats_detected": """**⚠️ Issue retrieving video formats:**
You are probably blocked for accessing this content. This video might be **age-restricted**, **private**, or **region-locked** and/or your **cookies might be invalid or expired**.

Update your file cookies or try using **browser cookies** instead of file cookies. Make sure you're signed in to YouTube in your browser.""",
    "toast_download_completed": "Download completed",
    "warning_file_not_found": "Download OK but final file not found. Check TMP folder.",
    # === LOG MESSAGES ===
    "log_keyframes_extraction": "[INFO] Extracting keyframes...",
    "log_keyframes_count": "[INFO] {count} keyframes found",
    "log_keyframes_error": "[ERROR] Error during keyframes extraction: {error}",
    "log_keyframes_failed": "[warn] Unable to extract keyframes: {error}",
    "log_keyframes_selected": "[INFO] Selected keyframes: {start:.6f}s → {end:.6f}s",
    "log_keyframes_offset": "[INFO] Offset: start {start_offset:.1f}s, end {end_offset:.1f}s",
    "log_keyframes_fallback": "[WARN] Keyframes extraction failed, using exact timestamps",
    "log_mode_keyframes": "[INFO] 🚀 KEYFRAMES Mode - Fast cutting without re-encoding",
    "log_mode_precise": "[INFO] 🎯 PRECISE Mode - Exact cutting with full re-encoding",
    "log_ffmpeg_execution": "[INFO] Executing ffmpeg command ({mode})...",
    "log_formats_detecting": "[INFO] Detecting available video formats...",
    "log_formats_count": "[INFO] {count} video formats detected",
    "log_formats_error": "[ERROR] Error during format detection: {error}",
    "log_formats_failed": "[warn] Unable to retrieve formats: {error}",
    "log_fetching_sponsorblock": "[INFO] Fetching SponsorBlock segments...",
    "log_found_segments": "[INFO] Found {count} SponsorBlock segments to remove",
    # === ENHANCED STATUS MESSAGES ===
    "status_downloading_with_details": "📥 Downloading: {speed} | ETA: {eta} | Size: {size}",
    "status_downloading_detailed": "📥 {percent}% | ⚡ {speed} | ⏱️ ETA: {eta} | 🕘 Time: {elapsed}",
    "status_downloading_progress": "📥 {percent}% - Downloading...",
    "status_downloading_fragments": "🧩 Fragments: {current}/{total} ({percent}%)",
    "status_extracting_info": "🔍 Extracting video information...",
    "status_processing_audio": "🎵 Processing audio...",
    "status_processing_video": "🎬 Processing video...",
    "status_embedding_metadata": "📋 Embedding metadata...",
    "status_embedding_thumbnail": "🖼️ Embedding thumbnail...",
    "status_converting_format": "🔄 Converting format...",
    "status_finalizing": "✨ Finalizing...",
    "status_downloading_video": "⬇️ Downloading video...",
    "status_downloading_audio": "🎵 Downloading audio...",
    "status_resuming_download": "▶️ Resuming download...",
    "status_file_exists_complete": "✅ File already downloaded and merged",
    "status_frame_processing": "🎞️ Frame {frame} | FPS: {fps} | Time: {time}",
    "log_segment_info": "  - {type}: {start} → {end} ({duration}s)",
    "log_sponsorblock_error": "[warn] Error retrieving SponsorBlock data: {error}",
    "log_sponsorblock_no_data": "[INFO] No SponsorBlock segments available for this video",
    "log_total_sponsor_time": "[INFO] Total sponsor time removed: {time}s",
    "log_adjusted_section": "[INFO] 🎯 Section adjusted for shortened video (after SponsorBlock removal):",
    "log_cut_until": "[INFO] In the shortened video, cut until: {adjusted_end} (instead of {original_end})",
    "log_format_forced_mp4": "[INFO] Format forced to MP4 for sections + subtitles",
    "log_quality_auto": "[INFO] Quality: Auto (best available)",
    "log_quality_selected": "[INFO] Selected quality: format {format_id}",
    "log_scenario_standard": "[INFO] Scenario: Standard full download",
    "log_scenario_adjusted": "[INFO] 🎯 Scenario: Download + SponsorBlock + adjusted cutting",
    "log_final_content_info": "[INFO] Final section will contain {duration}s of useful content (sponsors removed)",
    "log_scenario_mp4_cutting": "[INFO] Scenario: Complete MP4 download then cutting + subtitles remux",
    "log_scenario_ffmpeg_cutting": "[INFO] Scenario: Complete download then ffmpeg section cutting",
    "log_download_with_sponsorblock": "[INFO] Full download with SponsorBlock if enabled",
    "log_cutting_mode_selected": "[INFO] Selected cutting mode: {mode}",
    "log_h264_encoding": "[INFO] H.264 encoding: preset={preset}, crf={crf}",
    "log_h265_encoding": "[INFO] H.265 10-bit encoding: preset={preset}, crf={crf}",
    "log_srt_not_found": "⚠️ No subtitle file found for {lang} (checked SRT/VTT formats)",
    "log_srt_cut_failed": "[warn] Failed to cut SRT for {lang}",
    "log_runner_exception": "[runner-exception] {error}",
    "log_sponsorblock_metadata_failed": "[warn] Unable to retrieve SponsorBlock metadata: {error}",
    "log_sponsorblock_analysis": "[INFO] SponsorBlock analysis for section {start} → {end}:",
    "log_sponsorblock_segment_removed": "  - {type}: {start} → {end} ({duration}s removed)",
    "log_final_duration": "[INFO] Final duration: {duration}s of useful content",
    "log_sponsorblock_intelligent_analysis": "[INFO] SponsorBlock analysis for intelligent section adjustment...",
    "log_section_requested": "     Requested section: {start} → {end} ({duration}s)",
    "log_section_final": "     Final section:     {start} → {end} ({duration}s)",
    "log_content_obtained": "     Content obtained:  {duration}s of useful content (sponsors removed)",
    "log_cleanup_warning": "[warn] Could not cleanup original file: {error}",
    "log_temp_download_folder": "[INFO] Temporary download folder: {folder}",
    # Enhanced metrics labels
    "metrics_status": "✅ Status",
    "metrics_speed": "🚀 Speed",
    "metrics_eta": "⏱️ ETA",
    "metrics_size": "📦 Size",
    "metrics_progress": "🧩 Progress",
    "metrics_duration": "⏲️ Duration",
    # Folder management
    "folder_selection_method": "Folder selection method:",
    "folder_selection_existing": "📁 Choose from existing folders",
    "folder_selection_custom": "✏️ Create new folder path",
    "folder_preview_button": "🔍 Preview",
    "folder_preview_help": "Preview the folder structure that will be created",
    "folder_new_path_placeholder": "e.g., Tech/Python/Advanced or Personal Development/Motivation",
    "folder_new_path_help": "Create nested folders by separating with '/' (e.g., Tech/Python/Advanced)",
    # New folder creation
    "create_new_folder": "🆕 Create New Folder",
    "create_new_folder_title": "Create New Folder",
    "create_inside_folder": "📂 Create inside folder:",
    "create_inside_folder_help": "Select the parent folder where the new folder will be created",
    "root_folder": "📁 Root folder (/)",
    "path_preview": "📍 **Path:** `VIDEOS_FOLDER/[new-folder-name]`",
    "path_preview_with_parent": "📍 **Path:** `VIDEOS_FOLDER/{parent}/[new-folder-name]`",
    "folder_name_label": "📁 Folder name:",
    "folder_name_placeholder": "e.g., Tech, Education, Entertainment",
    "folder_name_help": "Enter a name for the new folder.",
    "folder_will_be_created_as": "ℹ️ Folder will be created as: `{path}`",
    "folder_already_exists": "⚠️ Folder `{path}` already exists",
    "ready_to_create_folder": "✅ Ready to create: `{path}`",
    "create_folder_btn": "✅ Create",
    "cancel_folder_btn": "❌ Cancel",
    "folder_exists_using": "⚠️ Folder '{path}' already exists. Using existing folder.",
    "folder_created_successfully": "✅ Folder '{path}' created successfully!",
    "error_creating_folder": "❌ Error creating folder: {error}",
    "enter_valid_folder_name": "⚠️ Please enter a valid folder name",
    "enter_folder_name": "⚠️ Please enter a folder name",
    # === SUCCESS & ERROR MESSAGES ===
    "success_download_complete": "✅ Download completed successfully!",
    "error_invalid_url": "❌ Invalid URL provided",
    # === FALLBACK ERROR MESSAGES ===
    "error_auth_required": "🔐 Authentication required. Please check your cookies or try again.",
    "error_fallback_failed": "❌ All download strategies failed. Please check your cookies and internet connection.",
    # === PREMIUM QUALITY MESSAGES ===
    "premium_quality_title": "🏆 Premium Quality Strategies",
    "premium_strategy_select": "Select quality strategy:",
    "premium_strategy_help": "Choose your quality strategy. Stricter options demand better codecs.",
    "premium_cookies_required": "🍪 **This strategy requires cookies** to access premium formats.",
    "premium_manual_format": "🔧 Manual format selection (optional)",
    "premium_manual_help": "Overrides premium strategy if selected",
    # === UPDATE VERSION CHECK ===
    "update_current_version": "Current version",
    "update_latest_version": "Latest version",
    "update_docker_title": "🐳 &nbsp; For Docker",
    "update_docker_instruction": "Pull and restart with the latest image",
    "update_docker_command": "`docker compose down && docker compose pull && docker compose up -d`",
    "update_local_title": "🖥️ &nbsp; For local installation",
    "update_local_instruction": "`pip install -U yt-dlp`",
    "update_git_title": "🖥️ &nbsp; For Git installation",
    "update_git_instruction": "`git pull origin main && pip install -e .`",
}

# Direct access to translation values (for backward compatibility)
status_retry_android = TRANSLATIONS["status_retry_android"]
status_retry_ios = TRANSLATIONS["status_retry_ios"]
status_retry_web = TRANSLATIONS["status_retry_web"]
status_retry_cookies = TRANSLATIONS["status_retry_cookies"]
status_trying_no_auth = TRANSLATIONS["status_trying_no_auth"]
error_auth_required = TRANSLATIONS["error_auth_required"]
error_fallback_failed = TRANSLATIONS["error_fallback_failed"]
